import pandas as pd

# Sample data with deeper nested JSON
data = {
    "col1": [
        {"a": {"key1": "value1", "key2": {"subkey1": "subvalue1", "subkey2": "subvalue2"}}, "b": {"key3": "value3"}},
        {"a": {"key4": "value4"}, "b": {"key5": {"subkey3": "subvalue3"}}},
        {"a": {"key6": {"subkey4": "subvalue4"}}, "b": {"key7": "value7"}}
    ],
    "col2": [10, 20, 30]
}

df = pd.DataFrame(data)

# Function to recursively flatten a nested dictionary into key-value pairs
def flatten_to_dict(d, parent_key=''):
    flat_dict = {}
    for k, v in d.items():
        full_key = f"{parent_key}.{k}" if parent_key else k
        if isinstance(v, dict):
            flat_dict.update(flatten_to_dict(v, full_key))
        else:
            flat_dict[full_key] = v
    return flat_dict

# Function to process a single row and expand its nested JSON into multiple rows
def expand_nested_json(row):
    expanded_rows = []
    for key, nested_dict in row["col1"].items():
        if isinstance(nested_dict, dict):
            flat_dict = flatten_to_dict(nested_dict)
            flat_dict["main_key"] = key
            flat_dict["col2"] = row["col2"]
            expanded_rows.append(flat_dict)
    return expanded_rows

# Process all rows in the DataFrame
expanded_data = []
for _, row in df.iterrows():
    expanded_data.extend(expand_nested_json(row))

# Create a new DataFrame with the flattened data
expanded_df = pd.DataFrame(expanded_data)

print(expanded_df)
