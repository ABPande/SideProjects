import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import random

st.set_page_config(layout="wide")
st.title("Live Current vs Prediction Viewer")

# Simulated cache to store live values across reruns
if "history" not in st.session_state:
    st.session_state.history = []

# Simulate a new incoming current_data point every rerun
def get_new_current_data():
    now = datetime.utcnow()
    dt_string = now.strftime('%Y%m%d%H%M%S')
    current_val = 22000 + random.randint(-30, 30)
    return {"current": current_val, "dateTime": dt_string}

# Simulate prediction values
def get_prediction_data(n=10):
    base = st.session_state.history[-1]["current"] if st.session_state.history else 22000
    return [base + random.randint(-20, 20) for _ in range(n)]

# Add new point to history
new_data = get_new_current_data()
st.session_state.history.append(new_data)

# Keep only the last 50 points
if len(st.session_state.history) > 50:
    st.session_state.history = st.session_state.history[-50:]

# Build DataFrame for plotting
df = pd.DataFrame(st.session_state.history)
df["datetime"] = pd.to_datetime(df["dateTime"], format="%Y%m%d%H%M%S")

# Generate predictions and align with last timestamp
preds = get_prediction_data()
pred_times = [df["datetime"].iloc[-1] + timedelta(seconds=2 * (i + 1)) for i in range(len(preds))]

df_preds = pd.DataFrame({
    "datetime": pred_times,
    "current": preds,
    "type": "Prediction"
})

df["type"] = "Actual"
df_plot = pd.concat([df[["datetime", "current", "type"]], df_preds])

# Plot
fig = px.line(df_plot, x="datetime", y="current", color="type", markers=True)
fig.update_layout(title="Current vs Prediction", xaxis_title="Time", yaxis_title="Current Value")
st.plotly_chart(fig, use_container_width=True)

# Rerun every 2 seconds
st.experimental_rerun()