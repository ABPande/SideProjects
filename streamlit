import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import random

st.set_page_config(layout="wide")
st.title("Live Current vs Prediction Viewer")

# Simulated cache to store live values across reruns
if "history" not in st.session_state:
    st.session_state.history = []

# Simulate a new incoming current_data point every rerun
def get_new_current_data():
    now = datetime.utcnow()
    dt_string = now.strftime('%Y%m%d%H%M%S')
    current_val = 22000 + random.randint(-30, 30)
    return {"current": current_val, "dateTime": dt_string}

# Simulate prediction values
def get_prediction_data(n=10):
    base = st.session_state.history[-1]["current"] if st.session_state.history else 22000
    return [base + random.randint(-20, 20) for _ in range(n)]

# Add new point to history
new_data = get_new_current_data()
st.session_state.history.append(new_data)

# Keep only the last 50 points
if len(st.session_state.history) > 50:
    st.session_state.history = st.session_state.history[-50:]

# Build DataFrame for plotting
df = pd.DataFrame(st.session_state.history)
df["datetime"] = pd.to_datetime(df["dateTime"], format="%Y%m%d%H%M%S")

# Generate predictions and align with last timestamp
preds = get_prediction_data()
pred_times = [df["datetime"].iloc[-1] + timedelta(seconds=2 * (i + 1)) for i in range(len(preds))]

df_preds = pd.DataFrame({
    "datetime": pred_times,
    "current": preds,
    "type": "Prediction"
})

df["type"] = "Actual"
df_plot = pd.concat([df[["datetime", "current", "type"]], df_preds])

# Plot
fig = px.line(df_plot, x="datetime", y="current", color="type", markers=True)
fig.update_layout(title="Current vs Prediction", xaxis_title="Time", yaxis_title="Current Value")
st.plotly_chart(fig, use_container_width=True)

# Rerun every 2 seconds
st.experimental_rerun()














################
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

# Simulated current data (in format: {'current': value, 'dateTime': timestamp})
current_data = [
    {'current': 22022, 'dateTime': '20250518112930'},
    {'current': 22025, 'dateTime': '20250518112932'},
    {'current': 22030, 'dateTime': '20250518112934'},
    {'current': 22035, 'dateTime': '20250518112936'},
]

# Simulated predicted data (new predicted values)
predicted_data = [21980, 21990, 22010, 22015]

# Step 1: Format predicted data into the same structure as current_data
predictions = []
base_time = datetime.strptime(current_data[-1]['dateTime'], '%Y%m%d%H%M%S') + timedelta(seconds=2)

for i, pred in enumerate(predicted_data):
    pred_time = base_time + timedelta(seconds=2 * i)
    predictions.append({'current': pred, 'dateTime': pred_time.strftime('%Y%m%d%H%M%S')})

# Combine both current and predicted data into a single dataframe
df_current = pd.DataFrame(current_data)
df_current["type"] = "Actual"
df_predicted = pd.DataFrame(predictions)
df_predicted["type"] = "Prediction"

# Combine them into one DataFrame
df = pd.concat([df_current, df_predicted], ignore_index=True)

# Convert 'dateTime' to pandas datetime for better plotting
df['datetime'] = pd.to_datetime(df['dateTime'], format='%Y%m%d%H%M%S')

# Step 2: Plot both current and predicted data
fig = px.line(df, x="datetime", y="current", color="type", markers=True, title="Current Data vs Prediction")
fig.update_layout(xaxis_title="Time", yaxis_title="Current Value")

st.plotly_chart(fig, use_container_width=True)